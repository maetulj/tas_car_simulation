<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from tas_car_platform.urdf.xacro    | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="tas_car_platform" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!--
file: tas_car_platform.urdf.xacro
author: gsimonic

This file defines the model for the tas_car RC car from LSR.

The measurements are in meters, angles are in radians and masses in kilograms.
All of these values are just approximations.

For the model to work in Gazebo:
- all links (even connections) must have an inertial element
- a link must have a collision element to be visible in Gazebo
- the link must have a Gazebo material

Macros are defined in "macros.xacro".
Materials are defined in "materials.xacro".
Gazebo parameters are defined in "tas_car.gazebo".

This work is open for upgrading.
Things that need to be improved:
- vehicle measurements
- various links

-->
  <!-- Define parameters. -->
  <!-- Some degree to radians conversions. -->
  <!-- Chassis. -->
  <!-- Almin: 0.138 -->
  <!-- Caster. -->
  <!-- Wheels. -->
  <!-- Distance between two (front or rear) wheels. -->
  <!-- Shock absorbers. -->
  <!-- hex_hub_dist is the distance between left and right hex hubs when
       the shock absorbers are fully extended. axle_length is the distance
       from a U joint to the corresponding hex hub. wheel_travel is the
       vertical wheel travel. -->
  <!-- Some default motor specifications. -->
  <!-- These constants are used to simulate a  Savox SV-0235MG servo operated at
       7.4 V. servo_stall_torque is measured in N m. servo_no_load_speed is
       measured in rad/s. -->
  <!-- produces 486.1 oz-in = 3.432620346181713 n-m of torque -->
  <!-- no load speed 0.13 sec/60 deg -> (1/0.13)*60 deg/sec = 8.05536578 rad/s -->
  <!-- Camera. -->
  <!-- Include external files. -->
  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
    <!-- Friction. -->
    <mu1>0</mu1>
    <mu2>0</mu2>
  </gazebo>
  <gazebo reference="chassis">
    <material>Gazebo/Orange</material>
  </gazebo>
  <!-- Add the plugin to acces the joints of the wheels. -->
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <robotNamespace>/tas_car_platform</robotNamespace>
    </plugin>
  </gazebo>
  <!--
	<gazebo>
		<plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
			<alwaysOn>true</alwaysOn>
			<updateRate>50</updateRate>
			<leftJoint>front_left_wheel_hinge</leftJoint>
			<rightJoint>front_right_wheel_hinge</rightJoint>
			<wheelSeparation>${chassisWidth+wheelWidth}</wheelSeparation>
			<wheelDiameter>${2*wheelRadius}</wheelDiameter>
			<torque>1000</torque>
			<commandTopic>tas_car/cmd_vel</commandTopic>
			<odometryTopic>tas_car/odom_diffdrive</odometryTopic>
			<odometryFrame>odom</odometryFrame>
			<robotBaseFrame>footprint</robotBaseFrame>
		</plugin>
	</gazebo>
-->
  <!-- SENSORS -->
  <!-- Camera. -->
  <!--
	<gazebo reference="camera">
		<material>Gazebo/Blue</material>
		<sensor type="camera" name="camera1">
			<update_rate>30.0</update_rate>
			<camera name="head">
				<horizontal_fov>1.3962634</horizontal_fov>
				<image>
					<width>800</width>
					<height>800</height>
					<format>R8G8B8</format>
				</image>
				<clip>
					<near>0.02</near>
					<far>300</far>
				</clip>
			</camera>
			<plugin name="camera_controller" filename="libgazebo_ros_camera.so">
				<alwaysOn>true</alwaysOn>
				<updateRate>0.0</updateRate>
				<cameraName>tas_car/camera1</cameraName>
				<imageTopicName>image_raw</imageTopicName>
				<cameraInfoTopicName>camera_info</cameraInfoTopicName>
				<frameName>camera_link</frameName>
				<hackBaseline>0.07</hackBaseline>
				<distortionK1>0.0</distortionK1>
				<distortionK2>0.0</distortionK2>
				<distortionK3>0.0</distortionK3>
				<distortionT1>0.0</distortionT1>
				<distortionT2>0.0</distortionT2>
			</plugin>
		</sensor>
	</gazebo>
-->
  <!-- Hokuyo Gazebo reference. -->
  <!--
	<gazebo reference="hokuyo_link">
		<sensor type="gpu_ray" name="head_hokuyo_sensor">
			<pose>0 0 0 0 0 0</pose>
			<visualize>false</visualize>
			<update_rate>40</update_rate>
			<ray>
				<scan>
					<horizontal>
						<samples>720</samples>
						<resolution>1</resolution>
						<min_angle>-1.570796</min_angle>
						<max_angle>1.570796</max_angle>
					</horizontal>
				</scan>
				<range>
					<min>0.10</min>
					<max>30.0</max>
					<resolution>0.01</resolution>
				</range>
				<noise>
					<type>gaussian</type>
					<!- Noise parameters based on published spec for Hokuyo laser
					achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
					stddev of 0.01m will put 99.7% of samples within 0.03m of the true
					reading. -->
  <!--
					<mean>0.0</mean>
					<stddev>0.01</stddev>
				</noise>
			</ray>
			<plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so">
				<topicName>/rrbot/laser/scan</topicName>
				<frameName>hokuyo_link</frameName>
			</plugin>
		</sensor>
	</gazebo>
-->
  <material name="black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.423529411765 0.0392156862745 1.0"/>
  </material>
  <material name="brown">
    <color rgba="0.870588235294 0.811764705882 0.764705882353 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <material name="chassis_mat">
    <color rgba="0.5 0.5 0.5 1"/>
  </material>
  <!-- Null inertial element. This is needed to make the model work with
       Gazebo. -->
  <!-- Inertia of a thin cylinder. -->
  <!-- Inertia of any empty box. -->
  <!-- Shock absorbers. -->
  <!-- Rear shock absorber. -->
  <!-- The "wheel" macro defines an axle carrier, axle, and wheel. -->
  <!-- Front wheel -->
  <!-- Rear wheel -->
  <!-- Start the model description. -->
  <!-- base_link must have geometry so that its axes can be displayed in
       rviz. -->
  <link name="base_link">
    <!-- Can be empty. -->
  </link>
  <!-- Chassis -->
  <link name="chassis">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.0695"/>
      <geometry>
        <box size="0.358 0.18 0.068"/>
      </geometry>
      <material name="chassis_mat"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.0695"/>
      <geometry>
        <box size="0.358 0.18 0.18"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0695"/>
      <mass value="3"/>
      <inertia ixx="0.009256" ixy="0" ixz="0" iyy="0.033197" iyz="0" izz="0.033197"/>
    </inertial>
  </link>
  <!-- Connect the base_link to the chassis. -->
  <joint name="base_link_to_chasis" type="fixed">
    <axis xyz="0 -1 -1"/>
    <parent link="base_link"/>
    <child link="chassis"/>
  </joint>
  <!-- Add the wheels. -->
  <joint name="left_front_shock" type="prismatic">
    <parent link="chassis"/>
    <child link="left_steering_link"/>
    <origin xyz="0.25                        0.09                        -0.043"/>
    <axis xyz="0 0 -1"/>
    <limit effort="189.1369818" lower="-0.05" upper="0.05" velocity="1000"/>
    <dynamics damping="88" friction="0.0001" spring_reference="0.08" spring_stiffness="3152"/>
  </joint>
  <transmission name="left_front_shock_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_front_shock">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_front_shock_act">
      <!-- This hardwareInterface element exists for compatibility
                 with ROS Hydro. -->
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="left_steering_link">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>
  <joint name="left_steering_joint" type="revolute">
    <parent link="left_steering_link"/>
    <child link="left_front_axle_carrier"/>
    <!-- cant the front wheels to improve traction -->
    <axis xyz="0 -0.09950372  0.99503719"/>
    <limit effort="3.43262034618" lower="-0.3665191429" upper="0.3665191429" velocity="8.05536578"/>
  </joint>
  <transmission name="left_steering_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_steering_joint">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_steering_act">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <!-- Add the wheel. -->
  <!-- Define the axle carrier with zero inertia. -->
  <link name="left_front_axle_carrier">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>
  <!-- The left and right axles have the same axis so that identical
        rotation values cause the wheels to rotate in the same direction. -->
  <joint name="left_front_axle" type="continuous">
    <parent link="left_front_axle_carrier"/>
    <child link="left_front_wheel"/>
    <origin rpy="1.57079633 0 0" xyz="0 0 0"/>
    <axis xyz="0 0 -1"/>
    <limit effort="2" velocity="282.315789474"/>
    <dynamics damping="0.001" friction="0.5"/>
  </joint>
  <transmission name="left_front_axle_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_front_axle">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_front_axle_act">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="left_front_wheel">
    <visual>
      <origin xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.059" radius="0.0695"/>
      </geometry>
    </visual>
    <collision name="collision">
      <origin xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.059" radius="0.0695"/>
      </geometry>
    </collision>
    <collision name="material">
      <origin xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.059" radius="0.0695"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.5"/>
      <inertia ixx="0.000748822916667" ixy="0" ixz="0" iyy="0.000748822916667" iyz="0" izz="0.0012075625"/>
    </inertial>
    <max_contacts>1</max_contacts>
    <surface>
      <contact>
        <ode>
          <soft_cfm>0.000000001</soft_cfm>
          <soft_erp>0.2</soft_erp>
          <kp>1e+10</kp>
          <kd>10</kd>
          <max_vel>0.01</max_vel>
          <min_depth>0.005</min_depth>
        </ode>
      </contact>
    </surface>
  </link>
  <gazebo reference="left_front_wheel">
    <!-- Define friction of the wheel. -->
    <mu1>0.7</mu1>
    <mu2>0.75</mu2>
    <!-- Define the material for Gazebo. -->
    <material>Gazebo/Black</material>
  </gazebo>
</robot>

